@page "/GetFilesInDiretory/{EnvironmentVal}"
@using BlazorApp.Helpers
@using BlazorApp.Model.Services
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _navigationManager

<PageTitle>FilesInDiretory</PageTitle>

<style>
	.button {
		border: none;
		color: white;
		padding: 9px 23px;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 12px;
		margin: 4px 2px;
		cursor: pointer;
	}

	.button1 {
		background-color: gray;
	}

	.button2 {
		background-color: cornflowerblue;
	}

	table {
		font-family: arial, sans-serif;
		border-collapse: collapse;
		width: 100%;
	}

	td, th {
		border: 1px solid #dddddd;
		text-align: left;
		padding: 8px;
	}

	tr:nth-child(even) {
		background-color: #dddddd;
	}
</style>

<h3>Get Files In Diretory</h3>
<br />
<hr>
<br />
<form method="post" @onsubmit="Submit" @formname="starship-plain-form">
	<AntiforgeryToken />
	<div>
		<label>
			PrefixPath:
			<InputSelect @bind-Value="prefixPath">
				<option value=0>batch/trading/nb/dev</option>
			</InputSelect>
		</label>
	</div>
	<br />
	<div>
		<label>
			FolderNameOrigin:
			<InputSelect @bind-Value="folderNameOrigin">
				<option value=0>caf</option>
				<option value=1>cambio</option>
				<option value=2>changeaddr</option>
				<option value=3>csald</option>
				<option value=4>desvalorizacao</option>
				<option value=5>esma</option>
				<option value=6>fact</option>
				<option value=7>hdh</option>
				<option value=8>isin</option>
				<option value=9>isinrfu</option>
				<option value=10>ptalm</option>
				<option value=11>rco</option>
				<option value=12>rdjrc</option>
				<option value=13>refc</option>
				<option value=14>rendibilidade</option>
				<option value=15>rfusalpos</option>
				<option value=16>rte</option>
				<option value=17>rts22</option>
				<option value=18>saxo</option>
				<option value=19>siet</option>
				<option value=20>sii</option>
			</InputSelect>
		</label>
	</div>
	<br />
	<div>
		<label>
			SubFoldersOrigin:
			<InputSelect @bind-Value="subFoldersOrigin">
				<option value="subFoldersOrigin=0">in</option>
				<option value="subFoldersOrigin=1">out</option>
				<option value="subFoldersOrigin=2">bak</option>
				<option value="subFoldersOrigin=3">work</option>
			</InputSelect>
		</label>
	</div>
	<hr>
	<div>
		<button class="button button2" type="submit">Submit</button>
	</div>
</form>
<br />
<hr>
<br />
<div>
	@if (FilesInDiretory.Count > 0)
	{
		<table>
			<tr>
				<th>@nameof(FileInDiretory.FileName)</th>
				<th>@nameof(FileInDiretory.LengthInBytes)</th>
				<th>@nameof(FileInDiretory.LengthInMB)</th>
			</tr>

			@foreach (var item in FilesInDiretoryPaginated)
			{
				<tr>
					<td>@item.FileName</td>
					<td>@item.LengthInBytes</td>
					<td>@item.LengthInMB</td>
				</tr>
			}
		</table>
		<hr>
		<div class="pagination">
			<button @onclick="PreviousPage" disabled="@(!CanGoBack)">Previous</button>
			<span>Page @currentPage of @totalPages</span>
			<button @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
		</div>
		<br />
		<hr>
		<br />
	}
</div>

<button class="button button1" @onclick=GoBack>Back</button>


@code {
	[Parameter]
	public string EnvironmentVal { get; set; } = string.Empty;

	private int prefixPath { get; set; }

	private int folderNameOrigin { get; set; }

	private string[] subFoldersOrigin { get; set; } = [];

	private List<FileInDiretory> FilesInDiretory { get; set; } = new();

	#region PaginationProperties
	private List<FileInDiretory> FilesInDiretoryPaginated { get; set; } = new();

	private int currentPage = 1;
	private int pageSize = 10;
	private int totalPages = 0;

	private bool CanGoBack => currentPage > 1;
	private bool CanGoNext => currentPage < totalPages;
	#endregion PaginationProperties

	protected void GoBack()
	{
		switch (EnvironmentVal)
		{
			case "D":
				_navigationManager.NavigateTo($"/Dev");
				break;
			case "Q":
				_navigationManager.NavigateTo($"/Qua");
				break;
			case "P":
				_navigationManager.NavigateTo($"/Prd");
				break;
		}
	}

	private async Task Submit()
	{
		if (ServicesRefData.Services.TryGetValue(EnvironmentVal, out var services))
		{
			if (services.TryGetValue(2, out string? url) && !string.IsNullOrEmpty(url))
			{
				var request = new HttpRequestMessage(HttpMethod.Get,
				string.Format(url, prefixPath, folderNameOrigin, string.Join('&', subFoldersOrigin)));
				request.Headers.Add("Accept", "text/plain");

				var client = ClientFactory.CreateClient();

				var response = await client.SendAsync(request);

				if (response.IsSuccessStatusCode)
				{
					using var responseStream = await response.Content.ReadAsStreamAsync();
					FilesInDiretory = await JsonSerializer.DeserializeAsync
						<List<FileInDiretory>>(responseStream) ?? new();
				}
			}
		}

		totalPages = (int)Math.Ceiling(FilesInDiretory.Count / (double)pageSize);
		UpdatePaginatedData();
	}

	#region PaginationMethods
	private void UpdatePaginatedData()
	{
		FilesInDiretoryPaginated = FilesInDiretory.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
	}

	private void PreviousPage()
	{
		if (CanGoBack)
		{
			currentPage--;
			UpdatePaginatedData();
		}
	}

	// Go to the next page
	private void NextPage()
	{
		if (CanGoNext)
		{
			currentPage++;
			UpdatePaginatedData();
		}
	}
	#endregion PaginationMethods

	public class FileInDiretory
	{
		[JsonPropertyName("fileName")]
		public string? FileName { get; set; }

		[JsonPropertyName("lengthInBytes")]
		public long LengthInBytes { get; set; }

		[JsonPropertyName("lengthInMB")]
		public decimal LengthInMB { get; set; }
	}

}
