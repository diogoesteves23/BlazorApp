@page "/JobDashBoard/{EnvironmentVal}"
@using BlazorApp.Helpers
@using BlazorApp.Model.DumpJE
@using BlazorApp.Model.Services
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text
@inject IHttpClientFactory ClientFactory
@inject NavigationManager _navigationManager

<PageTitle>JobDashboard</PageTitle>

<style>
	.button {
	border: none;
	color: white;
	padding: 9px 23px;
	text-align: center;
	text-decoration: none;
	display: inline-block;
	font-size: 12px;
	margin: 4px 2px;
	cursor: pointer;
	}

	.button1 {
	background-color: gray;
	}

	.button2 {
	background-color: cornflowerblue;
	}

	.vl {
	border-left: 6px solid black;
	height: 255px;
	position: absolute;
	left: 32%;
	margin-left: -3px;
	top: 220px;
	width: 2px;
	}

	* {
	box-sizing: border-box;
	}

	/* Create two unequal columns that floats next to each other */
	.column {
	float: left;
	padding: 10px;
	height: 280px;
	}

	.left {
	width: 25%;
	}

	.right {
	width: 75%;
	}

	/* Clear floats after the columns */
	.row:after {
	content: "";
	display: table;
	clear: both;
	}

	.table-container {
	max-height: 210px;
	overflow-y: auto;
	border: 1px solid #ccc;
	width: 100%;
	}

	table {
	width: 100%;
	border-collapse: collapse;
	}

	thead th {
	position: sticky;
	top: 0;
	background-color: #f1f1f1;
	z-index: 1;
	}

	th, td {
	padding: 10px;
	text-align: left;
	border: 1px solid #ddd;
	}

	tr:nth-child(even) {
	background-color: #f2f2f2
	}

	.error {
	color: red;
	}
</style>

<h3>JobDashBoard</h3>
<hr>
<form method="post" @onsubmit="SubmitJobInfo" @formname="starship-plain-form">
	<AntiforgeryToken />
	<div>
		<label>
			JobId:
			<InputNumber @bind-value="jobId" />
		</label>
		<button class="button button2" type="submit">Submit</button>
	</div>
	<hr>
	@if (messageStoreJobInfo.Length > 0)
	{
		<div>
			<p class="error">@messageStoreJobInfo</p>
		</div>
		<hr>
	}
</form>

@if (resultJobInfo != null && resultJobInfo.JobId != 0)
{
	<div class="row">
		<div class="column left">
			<label>
				<b>@nameof(resultJobInfo.JobId):</b> @resultJobInfo.JobId
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.JobStatus):</b> @resultJobInfo.JobStatus
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.JobStatusDescription):</b> @resultJobInfo.JobStatusDescription
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.JobType):</b> @resultJobInfo.JobType
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.JobTypeDescription):</b> @resultJobInfo.JobTypeDescription
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.TargetType):</b> @resultJobInfo.TargetType
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.TargetTypeDescription):</b> @resultJobInfo.TargetTypeDescription
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.TargetKey):</b> @resultJobInfo.TargetKey
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.ProcessingType):</b> @resultJobInfo.ProcessingType
			</label>
			<br />
			<label>
				<b>@nameof(resultJobInfo.ProcessingTypeDescription):</b> @resultJobInfo.ProcessingTypeDescription
			</label>
		</div>
		<div class="vl"></div>

		@if (dumpExecution.JobExecutionList.Count > 0)
		{
			<div class="column right">
				<h4>Job Executions List:</h4>
				<div class="table-container">
					<table>
						<thead>
							<tr>
								<th>@nameof(JobExecutionInfo.Id)</th>
								<th>@nameof(JobExecutionInfo.SchedulledDate)</th>
								<th>@nameof(JobExecutionInfo.StartDate)</th>
								<th>@nameof(JobExecutionInfo.EndDate)</th>
								<th>@nameof(JobExecutionInfo.BusinessDate)</th>
								<th>@nameof(JobExecutionInfo.Status)</th>
								<th>@nameof(JobExecutionInfo.LastExecution)</th>
								<th>@nameof(JobExecutionInfo.JobSequence)</th>
							</tr>
						</thead>
						<tbody class="scrollable">
							@foreach (var item in dumpExecution.JobExecutionList)
							{
								<tr>
									<td>@item.Id</td>
									<td>@item.SchedulledDate</td>
									<td>@item.StartDate</td>
									<td>@item.EndDate</td>
									<td>@item.BusinessDate</td>
									<td>@item.Status</td>
									<td>@item.LastExecution</td>
									<td>@item.JobSequence</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		}

		<br />
		<hr>
		<br />
	</div>

	<button class="button button2" @onclick="((args) => ShowOptions(args,EnumOptions.SetJobsChanges))">SetJobChanges</button>
	<button class="button button2" @onclick="((args) => ShowOptions(args,EnumOptions.InsertJobExecution))">InsertJobExecution</button>
	<button class="button button2" @onclick="((args) => ShowOptions(args,EnumOptions.ChangeJobExecution))">ChangeJobExecution</button>
	<button class="button button2" @onclick="((args) => ShowOptions(args,EnumOptions.RunJobExecution))">RunExecution</button>

	<div>
		@if (ShowSetJobChanges)
		{
			<form method="post" @onsubmit="SubmitSetJobsChanges" @formname="starship-plain-form">
				<AntiforgeryToken />
				<div>
					<label>
						Status:
						<InputCheckbox @bind-Value="setJobChangeIn.Status" />
					</label>
					<label>
						StartDate:
						<InputDate @bind-Value="setJobChangeIn.StartDate" />
					</label>
					<label>
						LastExecutionDate:
						<InputDate @bind-Value="setJobChangeIn.LastExecutionDate" />
					</label>
					<label>
						Time:
						<InputText @bind-Value="setJobChangeIn.Time" />
					</label>
					<label>
						Frequency:
						<InputText @bind-Value="setJobChangeIn.Frequency" />
					</label>
					<label>
						ProcessingType:
						<InputNumber @bind-Value="setJobChangeIn.ProcessingType" />
					</label>
					<label>
						JobSequence:
						<InputNumber @bind-Value="setJobChangeIn.JobSequence" />
					</label>
					<label>
						TargetKey:
						<InputText @bind-Value="setJobChangeIn.TargetKey" />
					</label>
					<label>
						TargetType:
						<InputNumber @bind-Value="setJobChangeIn.TargetType" />
					</label>
					<button class="button button2" type="submit">Submit</button>
				</div>
			</form>
		}
		@if (ShowInsertJobExecution)
		{
			<form method="post" @onsubmit="SubmitInsertJobExecution" @formname="starship-plain-form">
				<AntiforgeryToken />
				<div>
					<label>
						SchedulledDate:
						<InputDate @bind-Value="insertJobExecution.SchedulledDate" />
					</label>
					<label>
						BusinessDate:
						<InputDate @bind-Value="insertJobExecution.BusinessDate" />
					</label>
					<label>
						Status:
						<InputNumber @bind-Value="insertJobExecution.Status" />
					</label>
					<button class="button button2" type="submit">Submit</button>
				</div>
			</form>
		}
		@if (ShowChangeJobExecution)
		{
			<form method="post" @onsubmit="SubmitChangeJobExecution" @formname="starship-plain-form">
				<AntiforgeryToken />
				<div>
					<label>
						JobExecutionId:
						<InputNumber @bind-Value="changeJobExecution.JobExecutionId" />
					</label>
					<label>
						Status:
						<InputNumber @bind-Value="changeJobExecution.Status" />
					</label>
					<label>
						BusinessDate:
						<InputDate @bind-Value="changeJobExecution.BusinessDate" />
					</label>
					<button class="button button2" type="submit">Submit</button>
				</div>
			</form>
		}
		@if (ShowRunExecution)
		{
			<form method="post" @onsubmit="SubmitRunExecution" @formname="starship-plain-form">
				<AntiforgeryToken />
				<div>
					<label>
						JobExecution:
						<InputNumber @bind-Value="jobExecutionId" />
					</label>
					<button class="button button2" type="submit">Submit</button>
				</div>
			</form>
		}
		<hr>
		@if (messageStore.Length > 0)
		{
			<div>
				<p class="error">@messageStore</p>
			</div>
			<hr>
		}
	</div>
}


<button class="button button1" @onclick=CloseOptions>Clear</button>
<button class="button button1" @onclick=GoBack>Back</button>


@code {
	[Parameter]
	public string EnvironmentVal { get; set; } = string.Empty;

	private long? jobId { get; set; }

	private bool ValidationsJobId => !jobId.HasValue;

	private string messageStoreJobInfo = string.Empty;

	private string messageStore = string.Empty;

	private JobInfo resultJobInfo { get; set; } = new();

	private DumpExecutionOut dumpExecution { get; set; } = new();

	private SetJobChanges setJobChangeIn { get; set; } = new();

	private InsertJobExecution insertJobExecution { get; set; } = new();

	private ChangeJobExecution changeJobExecution { get; set; } = new();

	private long? jobExecutionId { get; set; }

	private bool ShowSetJobChanges { get; set; }

	private bool ShowInsertJobExecution { get; set; }

	private bool ShowChangeJobExecution { get; set; }

	private bool ShowRunExecution { get; set; }

	public enum EnumOptions
	{
		ResetBusinessDate = 1,
		SetJobsChanges = 2,
		InsertJobExecution = 3,
		ChangeJobExecution = 4,
		RunJobExecution = 5
	}

	protected void CloseOptions()
	{
		ShowSetJobChanges = false;
		ShowInsertJobExecution = false;
		ShowChangeJobExecution = false;
		ShowRunExecution = false;
	}

	protected void AuxOption(EnumOptions option, bool active)
	{
		switch (option)
		{
			case EnumOptions.SetJobsChanges:
				ShowSetJobChanges = active;
				ShowInsertJobExecution = !active;
				ShowChangeJobExecution = !active;
				ShowRunExecution = !active;
				break;
			case EnumOptions.InsertJobExecution:
				ShowSetJobChanges = !active;
				ShowInsertJobExecution = active;
				ShowChangeJobExecution = !active;
				ShowRunExecution = !active;
				break;
			case EnumOptions.ChangeJobExecution:
				ShowSetJobChanges = !active;
				ShowInsertJobExecution = !active;
				ShowChangeJobExecution = active;
				ShowRunExecution = !active;
				break;
			case EnumOptions.RunJobExecution:
				ShowSetJobChanges = !active;
				ShowInsertJobExecution = !active;
				ShowChangeJobExecution = !active;
				ShowRunExecution = active;
				break;
		}
	}

	protected void ShowOptions(EventArgs args, EnumOptions option)
	{
		AuxOption(option, true);
	}

	protected void GoBack()
	{
		switch (EnvironmentVal)
		{
			case "D":
				_navigationManager.NavigateTo($"/Dev");
				break;
			case "Q":
				_navigationManager.NavigateTo($"/Qua");
				break;
			case "P":
				_navigationManager.NavigateTo($"/Prd");
				break;
		}
	}

	private void HandleValidationRequestJobId()
	{
		// Custom validation logic
		if (ValidationsJobId)
		{
			messageStoreJobInfo = "Input Job Id must be non empty.";
		}
		else
		{
			messageStoreJobInfo = string.Empty;
		}
	}

	private async Task SubmitJobInfo()
	{
		HandleValidationRequestJobId();

		if (messageStoreJobInfo.Length != 0)
		{
			return;
		}

		if (ServicesRefData.Services.TryGetValue(EnvironmentVal, out var services))
		{
			if (services.TryGetValue(5, out string? url) && !string.IsNullOrEmpty(url))
			{
				url = string.Format(url, jobId);
				var request = new HttpRequestMessage(HttpMethod.Get, url);
				request.Headers.Add("Accept", "text/plain");

				var client = ClientFactory.CreateClient();

				var response = await client.SendAsync(request);

				if (response.IsSuccessStatusCode)
				{
					using var responseStream = await response.Content.ReadAsStreamAsync();

					resultJobInfo = await JsonSerializer.DeserializeAsync<JobInfo>(responseStream) ?? new();

					if (resultJobInfo.JobId != 0)
					{
						await GetDumpJobExecution(jobId, null);
					}
					else{
						resultJobInfo = new();
					}
				}
			}
		}
	}

	private async Task GetDumpJobExecution(long? jobId, DateTime? businessDate)
	{
		dumpExecution = new();
		if (ServicesRefData.Services.TryGetValue(EnvironmentVal, out var services))
		{
			if (services.TryGetValue(6, out string? url) && !string.IsNullOrEmpty(url))
			{
				StringBuilder str = new StringBuilder();
				if (jobId.HasValue)
				{
					str.AppendFormat("{0}={1}", nameof(jobId), jobId.Value);
				}

				if (businessDate.HasValue)
				{
					str.AppendFormat(str.Length > 0 ? "&{0}={1}" : "{0}={1}", nameof(businessDate), businessDate.Value);
				}

				url = string.Format(url, str);
				var request = new HttpRequestMessage(HttpMethod.Get, url);
				request.Headers.Add("Accept", "text/plain");

				var client = ClientFactory.CreateClient();

				var response = await client.SendAsync(request);

				if (response.IsSuccessStatusCode)
				{
					using var responseStream = await response.Content.ReadAsStreamAsync();

					var result = response.Content.ReadAsStringAsync();
					try
					{
						dumpExecution = await JsonSerializer.DeserializeAsync<DumpExecutionOut>(responseStream) ?? new();
					}
					catch (Exception ex)
					{
						Console.WriteLine(ex);
					}
				}
			}
		}
	}

	private async Task SubmitSetJobsChanges()
	{
		messageStore = string.Empty;
		if (jobId.HasValue)
		{
			setJobChangeIn.JobId = jobId.Value;
			var setJobsChangesArray = new SetJobChanges[] { setJobChangeIn };

			try
			{
				var resultStream = await SubmitPostAuxWithBody<SetJobChanges[]>(8, setJobsChangesArray);

				if (resultStream != null)
				{
					if (await JsonSerializer.DeserializeAsync<bool>(resultStream))
					{
						await SubmitJobInfo();
					}
				}
			}
			catch (Exception ex)
			{
				messageStore = ex.Message;
				return;
			}
		}
		else
		{
			messageStore = "Job Id is mandatory";
		}
	}

	private async Task SubmitInsertJobExecution()
	{
		messageStore = string.Empty;
		if (jobId.HasValue)
		{
			insertJobExecution.JobId = jobId.Value;

			try
			{
				var resultStream = await SubmitPostAuxWithBody<InsertJobExecution>(9, insertJobExecution);

				if (resultStream != null)
				{
					if (await JsonSerializer.DeserializeAsync<bool>(resultStream))
					{
						await GetDumpJobExecution(jobId.Value, null);
					}
				}
			}
			catch (Exception ex)
			{
				messageStore = ex.Message;
				return;
			}
		}
		else
		{
			messageStore = "Job Id is mandatory";
		}
	}

	private async Task SubmitChangeJobExecution()
	{
		messageStore = string.Empty;
		if (dumpExecution.JobExecutionList.Any(je => je.Id.Equals(changeJobExecution.JobExecutionId)))
		{
			var resultStream = await SubmitPostAuxWithBody<ChangeJobExecution>(10, changeJobExecution);

			if (resultStream != null)
			{
				if (await JsonSerializer.DeserializeAsync<bool>(resultStream) && jobId.HasValue)
				{
					await GetDumpJobExecution(jobId.Value, null);
				}
			}
		}
		else
		{
			messageStore = "Job Execution Id not available to make changes";
			return;
		}
	}

	private async Task SubmitRunExecution()
	{
		messageStore = string.Empty;
		if (jobExecutionId.HasValue)
		{
			if (!dumpExecution.JobExecutionList.Any(je => je.Id.Equals(jobExecutionId)))
			{
				messageStore = "Job Execution Id not available to run";
			}

			var resultStream = await SubmitPostAuxWithBody<long>(11, jobExecutionId.Value);

			if (resultStream != null)
			{
				if (await JsonSerializer.DeserializeAsync<bool>(resultStream) && jobId.HasValue)
				{ 
					await GetDumpJobExecution(jobId.Value, null);
				}
			}
		}
		else
		{
			await SubmitPostAux(11);
		}
	}

	private async Task<Stream?> SubmitPostAuxWithBody<T>(int serviceId, T body)
	{
		if (ServicesRefData.Services.TryGetValue(EnvironmentVal, out var services))
		{
			if (services.TryGetValue(serviceId, out string? url) && !string.IsNullOrEmpty(url))
			{
				var request = new HttpRequestMessage(HttpMethod.Post, url);
				request.Headers.Add("Accept", "text/plain");

				request.Content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body), Encoding.UTF8, "application/json");

				var client = ClientFactory.CreateClient();

				var response = await client.SendAsync(request);

				if (response.IsSuccessStatusCode)
				{
					return await response.Content.ReadAsStreamAsync();
				}
			}
		}

		return null;
	}

	private async Task<Stream?> SubmitPostAux(int serviceId)
	{
		if (ServicesRefData.Services.TryGetValue(EnvironmentVal, out var services))
		{
			if (services.TryGetValue(serviceId, out string? url) && !string.IsNullOrEmpty(url))
			{
				var request = new HttpRequestMessage(HttpMethod.Post, url);
				request.Headers.Add("Accept", "text/plain");

				var client = ClientFactory.CreateClient();

				var response = await client.SendAsync(request);

				if (response.IsSuccessStatusCode)
				{
					return await response.Content.ReadAsStreamAsync();
				}
			}
		}

		return null;
	}

	#region AuxClasses

	public class JobInfo()
	{
		[JsonPropertyName("jobId")]
		public long JobId { get; set; }

		[JsonPropertyName("jobStatus")]
		public long JobStatus { get; set; }

		[JsonPropertyName("jobStatusDescription")]
		public string JobStatusDescription { get; set; } = string.Empty;

		[JsonPropertyName("jobType")]
		public long JobType { get; set; }

		[JsonPropertyName("jobTypeDescription")]
		public string JobTypeDescription { get; set; } = string.Empty;

		[JsonPropertyName("targetType")]
		public long TargetType { get; set; }

		[JsonPropertyName("targetTypeDescription")]
		public string TargetTypeDescription { get; set; } = string.Empty;

		[JsonPropertyName("targetKey")]
		public string TargetKey { get; set; } = string.Empty;

		[JsonPropertyName("processingType")]
		public long ProcessingType { get; set; }

		[JsonPropertyName("processingTypeDescription")]
		public string ProcessingTypeDescription { get; set; } = string.Empty;
	}

	public class SetJobChanges()
	{
		[JsonPropertyName("status")]
		public bool Status { get; set; }

		[JsonPropertyName("jobId")]
		public long JobId { get; set; }

		[JsonPropertyName("startDate")]
		public DateTime StartDate { get; set; }

		[JsonPropertyName("lastExecutionDate")]
		public DateTime LastExecutionDate { get; set; }

		[JsonPropertyName("time")]
		public string Time { get; set; } = string.Empty;

		[JsonPropertyName("frequency")]
		public string Frequency { get; set; } = string.Empty;

		[JsonPropertyName("processingType")]
		public long ProcessingType { get; set; }

		[JsonPropertyName("jobSequence")]
		public long JobSequence { get; set; }

		[JsonPropertyName("targetKey")]
		public string TargetKey { get; set; } = string.Empty;

		[JsonPropertyName("targetType")]
		public long TargetType { get; set; }
	}

	public class InsertJobExecution()
	{
		[JsonPropertyName("jobId")]
		public long JobId { get; set; }

		[JsonPropertyName("schedulledDate")]
		public DateTime SchedulledDate { get; set; }

		[JsonPropertyName("businessDate")]
		public DateTime BusinessDate { get; set; }

		[JsonPropertyName("status")]
		public long Status { get; set; }
	}

	public class ChangeJobExecution()
	{
		[JsonPropertyName("jobExecutionId")]
		public long JobExecutionId { get; set; }

		[JsonPropertyName("status")]
		public long Status { get; set; }

		[JsonPropertyName("businessDate")]
		public DateTime BusinessDate { get; set; }
	}

	#endregion AuxClasses
}
